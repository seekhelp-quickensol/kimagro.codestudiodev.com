import * as axios from 'axios';
import React, { FunctionComponent } from 'react';

type AuthContextType = {
    user: UserInfoResponse;
    login: (access_code: string) => void;
    logout: () => void;
};
type Key = {
    kty: string;
    e: string;
    kid: string;
    n: string;
};
type JwkResponse = {
    keys: Key[];
};
type OIDCResponse = {
    issuer: string;
    authorization_endpoint: string;
    token_endpoint: string;
    token_endpoint_auth_methods_supported: string[];
    jwks_uri: string;
    userinfo_endpoint: string;
    response_types_supported: string[];
    grant_types_supported: string[];
    revocation_endpoint: string;
    revocation_endpoint_auth_methods_supported: string[];
    introspection_endpoint: string;
    introspection_endpoint_auth_methods_supported: string[];
    subject_types_supported: string[];
    id_token_signing_alg_values_supported: string[];
    scopes_supported: string[];
};
type TokenResponse = {
    access_token: string;
    refresh_token: string;
    scope: string;
    id_token: string;
    token_type: string;
    expires_in: number;
};
type UserInfoResponse = {
    sub: string;
    aud: string[];
    nbf: number;
    scope: string[];
    iss: string;
    exp: number;
    iat: number;
    user: string;
    authorities: string[];
};
type Config = {
    oidc_url?: string;
    jwks_url?: string;
    token_url?: string;
    redirect_url?: string;
    authorize_url?: string;
    user_info_url?: string;
    refresh_token_url?: string;
    revoke_token_url?: string;
    grant?: string;
    scope?: string;
    credentials?: {
        client_id: string;
        client_secret: string;
    };
};
declare const initializeAuthguard: (config: Config) => void;
declare const getJWKS: () => Promise<axios.AxiosResponse<JwkResponse, any>>;
declare const getOIDC: () => Promise<axios.AxiosResponse<OIDCResponse, any>>;
declare const getAuthorizationUrl: () => string;
declare const getAuthorizationCodeAccessToken: (access_code: string) => Promise<axios.AxiosResponse<TokenResponse, any>>;
declare const getClientCredentialsAccessToken: () => Promise<axios.AxiosResponse<TokenResponse, any>>;
declare const getUserInfo: (bearer: string) => Promise<axios.AxiosResponse<UserInfoResponse, any>>;
declare const refreshToken: (refresh_token: string) => Promise<axios.AxiosResponse<TokenResponse, any>>;
declare const revokeToken: (access_token: string) => Promise<axios.AxiosResponse<any, any>>;
declare const AuthguardContext: React.Context<{}>;
declare const useAuthguard: () => AuthContextType;
interface Props {
    loader?: React.ReactNode | null;
    children: React.ReactNode;
}
declare const Provider: FunctionComponent<Props>;

export { AuthguardContext, Provider, getAuthorizationCodeAccessToken, getAuthorizationUrl, getClientCredentialsAccessToken, getJWKS, getOIDC, getUserInfo, initializeAuthguard, refreshToken, revokeToken, useAuthguard };
