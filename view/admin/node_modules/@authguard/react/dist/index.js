"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// index.tsx
var authguard_client_exports = {};
__export(authguard_client_exports, {
  AuthguardContext: () => AuthguardContext,
  Provider: () => Provider,
  getAuthorizationCodeAccessToken: () => getAuthorizationCodeAccessToken,
  getAuthorizationUrl: () => getAuthorizationUrl,
  getClientCredentialsAccessToken: () => getClientCredentialsAccessToken,
  getJWKS: () => getJWKS,
  getOIDC: () => getOIDC,
  getUserInfo: () => getUserInfo,
  initializeAuthguard: () => initializeAuthguard,
  refreshToken: () => refreshToken,
  revokeToken: () => revokeToken,
  useAuthguard: () => useAuthguard
});
module.exports = __toCommonJS(authguard_client_exports);
var import_react = __toESM(require("react"));
var import_axios = __toESM(require("axios"));
var conf;
var initializeAuthguard = (config) => {
  if (!conf) {
    conf = config;
  } else {
    throw new Error("Config parameters are not correct");
  }
};
var getJWKS = () => __async(void 0, null, function* () {
  if (conf.jwks_url) {
    const res = yield import_axios.default.get(conf.jwks_url, {
      headers: {
        Accept: "application/json"
      }
    });
    return res;
  } else {
    throw new Error("JWKS URI not found");
  }
});
var getOIDC = () => __async(void 0, null, function* () {
  if (conf.oidc_url) {
    const res = yield import_axios.default.get(conf.oidc_url, {
      headers: {
        Accept: "application/json"
      }
    });
    return res;
  } else {
    throw new Error("OIDC URI not found");
  }
});
var getAuthorizationUrl = () => {
  var _a, _b;
  if (conf.authorize_url && ((_a = conf.credentials) == null ? void 0 : _a.client_id) && conf.scope && conf.redirect_url) {
    return `${conf.authorize_url}?response_type=code&client_id=${(_b = conf.credentials) == null ? void 0 : _b.client_id}&scope=${conf.scope}&redirect_uri=${conf.redirect_url}`;
  } else {
    throw new Error(
      "Authguard app is not initialized with required parameters. Call initializeAuthguard() first."
    );
  }
};
var getAuthorizationCodeAccessToken = (access_code) => __async(void 0, null, function* () {
  if (conf.token_url && conf.credentials && conf.redirect_url && conf.grant && access_code) {
    const res = yield import_axios.default.post(conf.token_url, null, {
      params: {
        redirect_uri: conf.redirect_url,
        grant_type: conf.grant,
        code: access_code
      },
      auth: {
        username: conf.credentials.client_id,
        password: conf.credentials.client_secret
      }
    });
    return res;
  } else {
    throw new Error(
      "Authguard app is not initialized with required parameters. Call initializeAuthguard() first."
    );
  }
});
var getClientCredentialsAccessToken = () => __async(void 0, null, function* () {
  if (conf.token_url && conf.credentials && conf.scope && conf.grant) {
    const res = yield import_axios.default.post(conf.token_url, null, {
      params: {
        grant_type: conf.grant,
        scope: conf.scope
      },
      auth: {
        username: conf.credentials.client_id,
        password: conf.credentials.client_secret
      }
    });
    return res;
  } else {
    throw new Error(
      "Authguard app is not initialized with required parameters. Call initializeAuthguard() first."
    );
  }
});
var getUserInfo = (bearer) => __async(void 0, null, function* () {
  if (conf.user_info_url && bearer) {
    const res = yield import_axios.default.get(conf.user_info_url, {
      headers: {
        Accept: "application/json",
        Authorization: `bearer ${bearer}`
      }
    });
    return res;
  } else {
    throw new Error(
      "Authguard app is not initialized with required parameters. Call initializeAuthguard() first."
    );
  }
});
var refreshToken = (refresh_token) => __async(void 0, null, function* () {
  if (conf.refresh_token_url && conf.credentials && refresh_token) {
    const res = yield import_axios.default.post(conf.refresh_token_url, null, {
      params: {
        grant_type: "refresh_token",
        refresh_token
      },
      auth: {
        username: conf.credentials.client_id,
        password: conf.credentials.client_secret
      }
    });
    return res;
  } else {
    throw new Error(
      "Authguard app is not initialized with required parameters. Call initializeAuthguard() first."
    );
  }
});
var revokeToken = (access_token) => __async(void 0, null, function* () {
  if (conf.revoke_token_url && conf.credentials && access_token) {
    const res = yield import_axios.default.post(conf.revoke_token_url, null, {
      params: {
        token: access_token
      },
      auth: {
        username: conf.credentials.client_id,
        password: conf.credentials.client_secret
      }
    });
    return res;
  } else {
    throw new Error(
      "Authguard app is not initialized with required parameters. Call initializeAuthguard() first."
    );
  }
});
var AuthguardContext = (0, import_react.createContext)({});
var useAuthguard = () => (0, import_react.useContext)(AuthguardContext);
var Provider = ({ loader, children }) => {
  const [user, setUser] = (0, import_react.useState)();
  const [loading, setLoading] = (0, import_react.useState)(true);
  (0, import_react.useEffect)(() => {
    fetchUser();
    const urlParams = new URLSearchParams(window.location.search);
    const code = urlParams.get("code");
    code && login(code);
  }, []);
  const fetchUser = () => __async(void 0, null, function* () {
    const _token = localStorage.getItem("token");
    if (_token && _token != "") {
      const userData = yield getUserInfo(_token);
      setUser(userData.data);
    }
    setLoading(false);
  });
  const login = (access_code) => __async(void 0, null, function* () {
    const tokenData = yield getAuthorizationCodeAccessToken(access_code);
    localStorage.setItem("token", tokenData.data.access_token);
    fetchUser();
    window.history.pushState({}, document.title, window.location.pathname);
  });
  const logout = () => __async(void 0, null, function* () {
    setUser(void 0);
    const _token = localStorage.getItem("token");
    if (_token && _token != "") {
      revokeToken(_token);
    }
    localStorage.removeItem("token");
  });
  return /* @__PURE__ */ import_react.default.createElement(AuthguardContext.Provider, { value: { user, logout, login } }, !loading ? children : /* @__PURE__ */ import_react.default.createElement("div", null, loader));
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  AuthguardContext,
  Provider,
  getAuthorizationCodeAccessToken,
  getAuthorizationUrl,
  getClientCredentialsAccessToken,
  getJWKS,
  getOIDC,
  getUserInfo,
  initializeAuthguard,
  refreshToken,
  revokeToken,
  useAuthguard
});
