var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// index.tsx
import React, {
  createContext,
  useContext,
  useEffect,
  useState
} from "react";
import axios from "axios";
var conf;
var initializeAuthguard = (config) => {
  if (!conf) {
    conf = config;
  } else {
    throw new Error("Config parameters are not correct");
  }
};
var getJWKS = () => __async(void 0, null, function* () {
  if (conf.jwks_url) {
    const res = yield axios.get(conf.jwks_url, {
      headers: {
        Accept: "application/json"
      }
    });
    return res;
  } else {
    throw new Error("JWKS URI not found");
  }
});
var getOIDC = () => __async(void 0, null, function* () {
  if (conf.oidc_url) {
    const res = yield axios.get(conf.oidc_url, {
      headers: {
        Accept: "application/json"
      }
    });
    return res;
  } else {
    throw new Error("OIDC URI not found");
  }
});
var getAuthorizationUrl = () => {
  var _a, _b;
  if (conf.authorize_url && ((_a = conf.credentials) == null ? void 0 : _a.client_id) && conf.scope && conf.redirect_url) {
    return `${conf.authorize_url}?response_type=code&client_id=${(_b = conf.credentials) == null ? void 0 : _b.client_id}&scope=${conf.scope}&redirect_uri=${conf.redirect_url}`;
  } else {
    throw new Error(
      "Authguard app is not initialized with required parameters. Call initializeAuthguard() first."
    );
  }
};
var getAuthorizationCodeAccessToken = (access_code) => __async(void 0, null, function* () {
  if (conf.token_url && conf.credentials && conf.redirect_url && conf.grant && access_code) {
    const res = yield axios.post(conf.token_url, null, {
      params: {
        redirect_uri: conf.redirect_url,
        grant_type: conf.grant,
        code: access_code
      },
      auth: {
        username: conf.credentials.client_id,
        password: conf.credentials.client_secret
      }
    });
    return res;
  } else {
    throw new Error(
      "Authguard app is not initialized with required parameters. Call initializeAuthguard() first."
    );
  }
});
var getClientCredentialsAccessToken = () => __async(void 0, null, function* () {
  if (conf.token_url && conf.credentials && conf.scope && conf.grant) {
    const res = yield axios.post(conf.token_url, null, {
      params: {
        grant_type: conf.grant,
        scope: conf.scope
      },
      auth: {
        username: conf.credentials.client_id,
        password: conf.credentials.client_secret
      }
    });
    return res;
  } else {
    throw new Error(
      "Authguard app is not initialized with required parameters. Call initializeAuthguard() first."
    );
  }
});
var getUserInfo = (bearer) => __async(void 0, null, function* () {
  if (conf.user_info_url && bearer) {
    const res = yield axios.get(conf.user_info_url, {
      headers: {
        Accept: "application/json",
        Authorization: `bearer ${bearer}`
      }
    });
    return res;
  } else {
    throw new Error(
      "Authguard app is not initialized with required parameters. Call initializeAuthguard() first."
    );
  }
});
var refreshToken = (refresh_token) => __async(void 0, null, function* () {
  if (conf.refresh_token_url && conf.credentials && refresh_token) {
    const res = yield axios.post(conf.refresh_token_url, null, {
      params: {
        grant_type: "refresh_token",
        refresh_token
      },
      auth: {
        username: conf.credentials.client_id,
        password: conf.credentials.client_secret
      }
    });
    return res;
  } else {
    throw new Error(
      "Authguard app is not initialized with required parameters. Call initializeAuthguard() first."
    );
  }
});
var revokeToken = (access_token) => __async(void 0, null, function* () {
  if (conf.revoke_token_url && conf.credentials && access_token) {
    const res = yield axios.post(conf.revoke_token_url, null, {
      params: {
        token: access_token
      },
      auth: {
        username: conf.credentials.client_id,
        password: conf.credentials.client_secret
      }
    });
    return res;
  } else {
    throw new Error(
      "Authguard app is not initialized with required parameters. Call initializeAuthguard() first."
    );
  }
});
var AuthguardContext = createContext({});
var useAuthguard = () => useContext(AuthguardContext);
var Provider = ({ loader, children }) => {
  const [user, setUser] = useState();
  const [loading, setLoading] = useState(true);
  useEffect(() => {
    fetchUser();
    const urlParams = new URLSearchParams(window.location.search);
    const code = urlParams.get("code");
    code && login(code);
  }, []);
  const fetchUser = () => __async(void 0, null, function* () {
    const _token = localStorage.getItem("token");
    if (_token && _token != "") {
      const userData = yield getUserInfo(_token);
      setUser(userData.data);
    }
    setLoading(false);
  });
  const login = (access_code) => __async(void 0, null, function* () {
    const tokenData = yield getAuthorizationCodeAccessToken(access_code);
    localStorage.setItem("token", tokenData.data.access_token);
    fetchUser();
    window.history.pushState({}, document.title, window.location.pathname);
  });
  const logout = () => __async(void 0, null, function* () {
    setUser(void 0);
    const _token = localStorage.getItem("token");
    if (_token && _token != "") {
      revokeToken(_token);
    }
    localStorage.removeItem("token");
  });
  return /* @__PURE__ */ React.createElement(AuthguardContext.Provider, { value: { user, logout, login } }, !loading ? children : /* @__PURE__ */ React.createElement("div", null, loader));
};
export {
  AuthguardContext,
  Provider,
  getAuthorizationCodeAccessToken,
  getAuthorizationUrl,
  getClientCredentialsAccessToken,
  getJWKS,
  getOIDC,
  getUserInfo,
  initializeAuthguard,
  refreshToken,
  revokeToken,
  useAuthguard
};
