{
  "version": 3,
  "sources": ["../../@pathofdev/react-tag-input/src/index.tsx", "../../@pathofdev/react-tag-input/src/components/Tag.tsx", "../../@pathofdev/react-tag-input/src/utils/selectors.tsx", "../../@pathofdev/react-tag-input/src/components/ContentEditable.tsx", "../../@pathofdev/react-tag-input/src/utils/functions.tsx"],
  "sourcesContent": ["import React from \"react\";\nimport {Tag} from \"./components/Tag\";\nimport {classSelectors} from \"./utils/selectors\";\n\ntype Tags = string[];\n\nexport interface ReactTagInputProps {\n  tags: Tags;\n  onChange: (tags: Tags) => void;\n  placeholder?: string;\n  maxTags?: number;\n  validator?: (val: string) => boolean;\n  editable?: boolean;\n  readOnly?: boolean;\n  removeOnBackspace?: boolean;\n}\n\ninterface State {\n  input: string;\n}\n\nexport default class ReactTagInput extends React.Component<ReactTagInputProps, State> {\n\n  state = { input: \"\" };\n\n  // Ref for input element\n  inputRef: React.RefObject<HTMLInputElement> = React.createRef();\n\n  onInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ input: e.target.value });\n  }\n\n  onInputKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n\n    const { input } = this.state;\n    const { validator, removeOnBackspace } = this.props;\n\n    // On enter\n    if (e.keyCode === 13) {\n\n      // Prevent form submission if tag input is nested in <form>\n      e.preventDefault();\n\n      // If input is blank, do nothing\n      if (input === \"\") { return; }\n\n      // Check if input is valid\n      const valid = validator !== undefined ? validator(input) : true;\n      if (!valid) {\n        return;\n      }\n\n      // Add input to tag list\n      this.addTag(input);\n\n    }\n    // On backspace or delete\n    else if (removeOnBackspace && (e.keyCode === 8 || e.keyCode === 46)) {\n\n      // If currently typing, do nothing\n      if (input !== \"\") {\n        return;\n      }\n\n      // If input is blank, remove previous tag\n      this.removeTag(this.props.tags.length - 1);\n\n    }\n\n  }\n\n  addTag = (value: string) => {\n    const tags = [ ...this.props.tags ];\n    tags.push(value);\n    this.props.onChange(tags);\n    this.setState({ input: \"\" });\n  }\n\n  removeTag = (i: number) => {\n    const tags = [ ...this.props.tags ];\n    tags.splice(i, 1);\n    this.props.onChange(tags);\n  }\n\n  updateTag = (i: number, value: string) => {\n    const tags = [...this.props.tags];\n    tags[i] = value;\n    this.props.onChange(tags);\n  }\n\n  render() {\n\n    const { input } = this.state;\n\n    const { tags, placeholder, maxTags, editable, readOnly, validator, removeOnBackspace } = this.props;\n\n    const maxTagsReached = maxTags !== undefined ? tags.length >= maxTags : false;\n\n    const isEditable = readOnly ? false : (editable || false);\n\n    const showInput = !readOnly && !maxTagsReached;\n\n    return (\n      <div className={classSelectors.wrapper}>\n        {tags.map((tag, i) => (\n          <Tag\n            key={i}\n            value={tag}\n            index={i}\n            editable={isEditable}\n            readOnly={readOnly || false}\n            inputRef={this.inputRef}\n            update={this.updateTag}\n            remove={this.removeTag}\n            validator={validator}\n            removeOnBackspace={removeOnBackspace}\n          />\n        ))}\n        {showInput &&\n          <input\n            ref={this.inputRef}\n            value={input}\n            className={classSelectors.input}\n            placeholder={placeholder || \"Type and press enter\"}\n            onChange={this.onInputChange}\n            onKeyDown={this.onInputKeyDown}\n          />\n        }\n      </div>\n    );\n\n  }\n\n}\n", "import React from \"react\";\nimport {classSelectors} from \"../utils/selectors\";\nimport {ContentEditable} from \"./ContentEditable\";\n\ninterface Props {\n  value: string;\n  index: number;\n  editable: boolean;\n  readOnly: boolean;\n  inputRef: React.RefObject<HTMLInputElement>;\n  update: (i: number, value: string) => void;\n  remove: (i: number) => void;\n  validator?: (val: string) => boolean;\n  removeOnBackspace?: boolean;\n}\n\nexport class Tag extends React.Component<Props> {\n\n  innerEditableRef: React.RefObject<HTMLDivElement> = React.createRef();\n\n  remove = () => this.props.remove(this.props.index);\n\n  render() {\n\n    const { value, index, editable, inputRef, validator, update, readOnly, removeOnBackspace } = this.props;\n\n    const tagRemoveClass = !readOnly ?\n      classSelectors.tagRemove : `${classSelectors.tagRemove} ${classSelectors.tagRemoveReadOnly}`;\n\n    return (\n      <div className={classSelectors.tag}>\n        {!editable && <div className={classSelectors.tagContent}>{value}</div>}\n        {editable && (\n          <ContentEditable\n            value={value}\n            inputRef={inputRef}\n            innerEditableRef={this.innerEditableRef}\n            className={classSelectors.tagContent}\n            change={(newValue) => update(index, newValue)}\n            remove={this.remove}\n            validator={validator}\n            removeOnBackspace={removeOnBackspace}\n          />\n        )}\n        <div className={tagRemoveClass} onClick={this.remove}/>\n      </div>\n    );\n\n  }\n\n}\n", "\nexport const classSelectors = {\n  wrapper: \"react-tag-input\",\n  input: \"react-tag-input__input\",\n  tag: \"react-tag-input__tag\",\n  tagContent: \"react-tag-input__tag__content\",\n  tagRemove: \"react-tag-input__tag__remove\",\n  tagRemoveReadOnly: \"react-tag-input__tag__remove-readonly\",\n};\n", "import React from \"react\";\nimport {safeHtmlString} from \"../utils/functions\";\n\ninterface Props {\n  value: string;\n  className: string;\n  innerEditableRef: React.RefObject<HTMLDivElement>;\n  inputRef: React.RefObject<HTMLInputElement>;\n  change: (value: string) => void;\n  remove: () => void;\n  validator?: (value: string) => boolean;\n  removeOnBackspace?: boolean;\n}\n\nexport class ContentEditable extends React.Component<Props> {\n\n  // Track focus state of editable tag\n  focused: boolean = false;\n\n  // Track if element has been removed from DOM\n  removed: boolean = false;\n\n  // Save value before input is focused / user starts typing\n  preFocusedValue: string = \"\";\n\n  componentDidMount() {\n    this.preFocusedValue = this.getValue();\n  }\n\n  onPaste = (e: React.ClipboardEvent<HTMLDivElement>) => {\n\n    // Cancel paste event\n    e.preventDefault();\n\n    // Remove formatting from clipboard contents\n    const text = e.clipboardData.getData(\"text/plain\");\n\n    // Insert text manually from paste command\n    document.execCommand(\"insertHTML\", false, safeHtmlString(text));\n\n  }\n\n  onFocus = () => {\n    this.preFocusedValue = this.getValue();\n    this.focused = true;\n  }\n\n  onBlur = () => {\n\n    this.focused = false;\n\n    const ref = this.props.innerEditableRef.current;\n    const { validator, change } = this.props;\n\n    if (!this.removed && ref) {\n\n      // On blur, if no content in tag, remove it\n      if (ref.innerText === \"\") {\n        this.props.remove();\n        return;\n      }\n\n      // Validate input if needed\n      if (validator) {\n        const valid = validator(this.getValue());\n        // If invalidate, switch ref back to pre focused value\n        if (!valid) {\n          ref.innerText = this.preFocusedValue;\n          return;\n        }\n      }\n\n      change(ref.innerText);\n\n    }\n\n  }\n\n  onKeyDown = (e: React.KeyboardEvent<HTMLDivElement>) => {\n\n    // On enter, focus main tag input\n    if (e.keyCode === 13) {\n      e.preventDefault();\n      this.focusInputRef();\n      return;\n    }\n\n    // On backspace, if no content in ref, remove tag and focus main tag input\n    const { removeOnBackspace } = this.props;\n    const value = this.getValue();\n    if (removeOnBackspace && e.keyCode === 8 && value === \"\") {\n      this.removed = true;\n      this.props.remove();\n      this.focusInputRef();\n      return;\n    }\n\n  }\n\n  getValue = () => {\n    const ref = this.getRef();\n    return ref ? ref.innerText : \"\";\n  }\n\n  getRef = () => {\n    return this.props.innerEditableRef.current;\n  }\n\n  focusInputRef = () => {\n    const { inputRef } = this.props;\n    if (inputRef && inputRef.current) {\n      inputRef.current.focus();\n    }\n  }\n\n  render() {\n    const { value, className, innerEditableRef } = this.props;\n    return (\n      <div\n        ref={innerEditableRef}\n        className={className}\n        contentEditable={true}\n        onPaste={this.onPaste}\n        onFocus={this.onFocus}\n        onBlur={this.onBlur}\n        onKeyDown={this.onKeyDown}\n        dangerouslySetInnerHTML={{ __html: safeHtmlString(value) }}\n      />\n    );\n  }\n\n}\n", "\nexport function removeLineBreaks(value: string) {\n  return value.replace(/(\\r\\n|\\n|\\r)/gm, \"\");\n}\n\n// TAKEN FROM - https://github.com/janl/mustache.js/blob/master/mustache.js#L55\nconst htmlEntityMap = {\n  \"&\": \"&amp;\",\n  \"<\": \"&lt;\",\n  \">\": \"&gt;\",\n  '\"': \"&quot;\",\n  \"'\": \"&#39;\",\n  \"/\": \"&#x2F;\",\n  \"`\": \"&#x60;\",\n  \"=\": \"&#x3D;\",\n};\nexport function escapeHtml(value: string) {\n  return String(value).replace(/[&<>\"'`=\\/]/g, (s) => {\n    // @ts-ignore\n    return htmlEntityMap[s];\n  });\n}\n\nexport function safeHtmlString(value: string) {\n  return escapeHtml(removeLineBreaks(value));\n}\n"],
  "mappings": "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",
  "names": ["import_react", "import_react", "ContentEditable", "React", "__extends", "Tag", "React", "__extends", "ReactTagInput", "React"]
}
